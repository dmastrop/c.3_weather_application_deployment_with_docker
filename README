# Full stack weather app docker deployment onto local EC2 controller



## NOTE: I am using an ubuntu 22 EC2 instance for all of this. The instance is running docker engine, kubectl, kops, kudo, kustomize, awscli2, helm and a jenkins_slave node (from another setup)
The instance name is in us-east-2: course3_kops_from_course8_project14_kops_snapshot t3.small
Due to disk space issues with docker engine increased volume size from 8GB to 16GB

## NOTE: there are 2 folders source_files and weaatherapp. Weatherapp is a direct clone and the source_files are from a zip of the repo. Both have latest source code for thie project.

## NOTE: For docker engine add ubuntu user to the docker group and execute all commands below as ubuntu user. Otherwise there will be docker build issues.

sudo usermod -aG docker ubuntu


## AWS configure list (for kops administration of the k8s cluster)

ubuntu@ip-172-31-21-52:~/course3_projects/3_weather_app/source_files/weatherapp/weather$ aws configure list
      Name                    Value             Type    Location
      ----                    -----             ----    --------
   profile                <not set>             None    None
access_key     **************** shared-credentials-file    
secret_key     **************** shared-credentials-file    
    region                us-east-1      config-file    ~/.aws/config








## auth microservice (golang)

This requires a mysql backend container as well to hook into to carrry the user database entries
docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=my-secret-pw mysql

Build the golang docker image from source code 

docker build -t auth:0.0.1 .

docker run -d -p 8080:8080 -e DB_HOST=172.17.0.1 -e DB_PASSWORD=my-secret-pw auth:0.0.1


### Dockerfile

#build stage
FROM golang:alpine AS builder
RUN apk add git
WORKDIR /go/src/app
RUN git clone https://github.com/abohmeed/weatherapp
WORKDIR /go/src/app/weatherapp/auth/src/main
RUN go build -o /go/bin/app -v ./...

#final stage
FROM alpine:latest
RUN apk --no-cache add ca-certificates
COPY --from=builder /go/bin/app /app
ENTRYPOINT /app
LABEL Name=auth Version=0.0.1
EXPOSE 8080



create a new user to test this out
curl -XPOST -d '{"user_name":"ahmed","user_password":"mypass"}' localhost:8080/users



Login with name
curl -XPOST -d '{"user_name":"ahmed","user_password":"mypass"}' localhost:8080/users/ahmed

output is the token so that the user can authenticate into the portal UI
{"JWT":"token**********************"}








## UI microservice (node.js javascript)

docker build -t ui:0.0.1 .

docker run -p 3000:3000 -d -e AUTH_HOST=172.17.0.1 -e AUTH_PORT=8080 ui:0.0.1
Note the hook into the auth microservice defined above. That container needs to be running.




Add a Security Group for TCP:3000 on public interface so that can test this out.
There is a login page and the credentials defined above can be used to log in.

The backend weather app and api hook are not configured yet. We need to get the weather container up and running.



### Dockerfile

FROM node:17
WORKDIR /usr/src/app
COPY package*.json ./
RUN npm install<<< reads package.json and installs dependencies
COPY . .
EXPOSE 3000
ENTRYPOINT ["node"]
CMD [ "app.js" ]












## weather app api (python/flask)

docker build -t weather:0.0.1 .

Subscribe to the realtime weather app on Weatherapi.com and get the api token that will hook into the weather app docker container so that the container can communicate with the real time weather app via the api.

docker run -p 5000:5000 -d -e APIKEY=6eafbb0c45msh451df8302c291f2p1e0a35jsnf98732edea29 weather:0.0.1

use the APIKEY from weatherapi.com (see above) for real time weather stats

### requirements.txt python dependencies

Need to have the following for flask and Werkzeug

Flask==2.0.2
Flask_Cors==3.0.10
requests==2.26.0
Werkzeug==2.2.2



### Dockerfile

FROM python:3.8-slim-buster
WORKDIR /app
COPY requirements.txt requirements.txt <<<< similar to package.json in node.js that installs dependencies
RUN pip3 install -r requirements.txt <<< pip3 is python pkg manager
COPY . .
EXPOSE 5000
ENTRYPOINT ["python3"]
CMD [ "/app/main.py" ]


### main.py python code

from flask import Flask, jsonify
from flask_cors import CORS
import requests
import os

app = Flask(__name__)
CORS(app)

@app.route("/")
def health():
    return "The service is running", 200

@app.route('/<city>')
def hello(city):
    url = "https://weatherapi-com.p.rapidapi.com/current.json"
    querystring = {"q":city}
    headers = {
        'x-rapidapi-host': "weatherapi-com.p.rapidapi.com",
        'x-rapidapi-key': os.getenv("APIKEY")
    }
    response = requests.request("GET", url, headers=headers, params=querystring)
    return jsonify(response.text)

if __name__ == '__main__':
    app.run(host="0.0.0.0")





## Current docker container state


ubuntu@ip-172-31-21-52:~/course3_projects/3_weather_app/source_files/weatherapp/weather$ docker ps
CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS                                                  NAMES
56f78337d73a   weather:0.0.1   "python3 /app/main.py"   18 minutes ago   Up 18 minutes   0.0.0.0:5000->5000/tcp, :::5000->5000/tcp              relaxed_varahamihira
bb8a1e35c731   ui:0.0.1        "node app.js"            2 hours ago      Up 2 hours      0.0.0.0:3000->3000/tcp, :::3000->3000/tcp              reverent_carson
cc86edf44521   auth:0.0.2      "/bin/sh -c /app"        2 hours ago      Up 2 hours      0.0.0.0:8080->8080/tcp, :::8080->8080/tcp              amazing_clarke
8a678dc804f8   mysql           "docker-entrypoint.s…"   3 hours ago      Up 3 hours      0.0.0.0:3306->3306/tcp, :::3306->3306/tcp, 33060/tcp   laughing_goldstine



## Need to remove the current node app.js UI container and start a new one that has the hook into the weather app now running on port 5000

ubuntu@ip-172-31-21-52:~/course3_projects/3_weather_app/source_files/weatherapp/weather$ docker rm -f bb8a1e35c731
bb8a1e35c731
ubuntu@ip-172-31-21-52:~/course3_projects/3_weather_app/source_files/weatherapp/weather$ docker ps
CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS                                                  NAMES
56f78337d73a   weather:0.0.1   "python3 /app/main.py"   47 minutes ago   Up 47 minutes   0.0.0.0:5000->5000/tcp, :::5000->5000/tcp              relaxed_varahamihira
cc86edf44521   auth:0.0.2      "/bin/sh -c /app"        3 hours ago      Up 3 hours      0.0.0.0:8080->8080/tcp, :::8080->8080/tcp              amazing_clarke
8a678dc804f8   mysql           "docker-entrypoint.s…"   3 hours ago      Up 3 hours      0.0.0.0:3306->3306/tcp, :::3306->3306/tcp, 33060/tcp   laughing_goldstine


### add the new UI docker container that hooks into the weather app

docker run -p 3000:3000 -d -e AUTH_HOST=172.17.0.1 -e AUTH_PORT=8080 -e WEATHER_HOST=172.17.0.1 -e WEATHER_PORT=5000 ui:0.0.1


ubuntu@ip-172-31-21-52:~/course3_projects/3_weather_app/source_files/weatherapp/weather$ docker run -p 3000:3000 -d -e AUTH_HOST=172.17.0.1 -e AUTH_PORT=8080 -e WEATHER_HOST=172.17.0.1 -e WEATHER_PORT=5000 ui:0.0.1
a45b1c1b62a30b36180a9e0ad0d2d98b0bce7d9e8478eb54f64801e446406cc0


ubuntu@ip-172-31-21-52:~/course3_projects/3_weather_app/source_files/weatherapp/weather$ docker ps
CONTAINER ID   IMAGE           COMMAND                  CREATED          STATUS          PORTS                                                  NAMES
a45b1c1b62a3   ui:0.0.1        "node app.js"            3 seconds ago    Up 2 seconds    0.0.0.0:3000->3000/tcp, :::3000->3000/tcp              objective_lehmann
56f78337d73a   weather:0.0.1   "python3 /app/main.py"   51 minutes ago   Up 51 minutes   0.0.0.0:5000->5000/tcp, :::5000->5000/tcp              relaxed_varahamihira
cc86edf44521   auth:0.0.2      "/bin/sh -c /app"        3 hours ago      Up 3 hours      0.0.0.0:8080->8080/tcp, :::8080->8080/tcp              amazing_clarke
8a678dc804f8   mysql           "docker-entrypoint.s…"   3 hours ago      Up 3 hours      0.0.0.0:3306->3306/tcp, :::3306->3306/tcp, 33060/tcp   laughing_goldstine




## Refresh the browser page (ahmed/mypass)

With the login we should be able to see the weather stats.  Note that this is runningl locally on the EC2 controller.  Next stage is to migrate this to the kops cluster









# Full stack weather app docker deployment onto kops cluster




.



